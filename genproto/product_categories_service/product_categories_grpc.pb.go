// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: product_categories.proto

package product_categories_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductCategoriesServiceClient is the client API for ProductCategoriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCategoriesServiceClient interface {
	Create(ctx context.Context, in *CreateProductCategories, opts ...grpc.CallOption) (*GetProductCategories, error)
	GetByID(ctx context.Context, in *ProductCategoriesPrimaryKey, opts ...grpc.CallOption) (*GetProductCategories, error)
	Update(ctx context.Context, in *UpdateProductCategories, opts ...grpc.CallOption) (*GetProductCategories, error)
	Delete(ctx context.Context, in *ProductCategoriesPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
}

type productCategoriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCategoriesServiceClient(cc grpc.ClientConnInterface) ProductCategoriesServiceClient {
	return &productCategoriesServiceClient{cc}
}

func (c *productCategoriesServiceClient) Create(ctx context.Context, in *CreateProductCategories, opts ...grpc.CallOption) (*GetProductCategories, error) {
	out := new(GetProductCategories)
	err := c.cc.Invoke(ctx, "/product_catrgories_service_go.ProductCategoriesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoriesServiceClient) GetByID(ctx context.Context, in *ProductCategoriesPrimaryKey, opts ...grpc.CallOption) (*GetProductCategories, error) {
	out := new(GetProductCategories)
	err := c.cc.Invoke(ctx, "/product_catrgories_service_go.ProductCategoriesService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoriesServiceClient) Update(ctx context.Context, in *UpdateProductCategories, opts ...grpc.CallOption) (*GetProductCategories, error) {
	out := new(GetProductCategories)
	err := c.cc.Invoke(ctx, "/product_catrgories_service_go.ProductCategoriesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCategoriesServiceClient) Delete(ctx context.Context, in *ProductCategoriesPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/product_catrgories_service_go.ProductCategoriesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCategoriesServiceServer is the server API for ProductCategoriesService service.
// All implementations should embed UnimplementedProductCategoriesServiceServer
// for forward compatibility
type ProductCategoriesServiceServer interface {
	Create(context.Context, *CreateProductCategories) (*GetProductCategories, error)
	GetByID(context.Context, *ProductCategoriesPrimaryKey) (*GetProductCategories, error)
	Update(context.Context, *UpdateProductCategories) (*GetProductCategories, error)
	Delete(context.Context, *ProductCategoriesPrimaryKey) (*empty.Empty, error)
}

// UnimplementedProductCategoriesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProductCategoriesServiceServer struct {
}

func (UnimplementedProductCategoriesServiceServer) Create(context.Context, *CreateProductCategories) (*GetProductCategories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProductCategoriesServiceServer) GetByID(context.Context, *ProductCategoriesPrimaryKey) (*GetProductCategories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedProductCategoriesServiceServer) Update(context.Context, *UpdateProductCategories) (*GetProductCategories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductCategoriesServiceServer) Delete(context.Context, *ProductCategoriesPrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeProductCategoriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCategoriesServiceServer will
// result in compilation errors.
type UnsafeProductCategoriesServiceServer interface {
	mustEmbedUnimplementedProductCategoriesServiceServer()
}

func RegisterProductCategoriesServiceServer(s grpc.ServiceRegistrar, srv ProductCategoriesServiceServer) {
	s.RegisterService(&ProductCategoriesService_ServiceDesc, srv)
}

func _ProductCategoriesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductCategories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoriesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_catrgories_service_go.ProductCategoriesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoriesServiceServer).Create(ctx, req.(*CreateProductCategories))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoriesService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoriesPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoriesServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_catrgories_service_go.ProductCategoriesService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoriesServiceServer).GetByID(ctx, req.(*ProductCategoriesPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoriesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductCategories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoriesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_catrgories_service_go.ProductCategoriesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoriesServiceServer).Update(ctx, req.(*UpdateProductCategories))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCategoriesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoriesPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCategoriesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_catrgories_service_go.ProductCategoriesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCategoriesServiceServer).Delete(ctx, req.(*ProductCategoriesPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCategoriesService_ServiceDesc is the grpc.ServiceDesc for ProductCategoriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCategoriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_catrgories_service_go.ProductCategoriesService",
	HandlerType: (*ProductCategoriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProductCategoriesService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ProductCategoriesService_GetByID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductCategoriesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProductCategoriesService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_categories.proto",
}
